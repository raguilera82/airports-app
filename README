# Execute in local

## Set environment

Create a .env file with the following content (don't track with git):

export MYSQL_ROOT_PASSWORD=<pass>
export MYSQL_PASSWORD=<pass>
export DATABASE_HOST='localhost'
export DATABASE_PORT='3307'
export DATABASE_NAME='devops'
export DATABASE_USER='devops'
export DATABASE_PASS=<pass>

Modify <pass> with the real password


```bash
$> source .env
```

## Raise the mysql database
```bash
$> docker-compose -f docker/test.yml up -d
```


## Raise the app

```bash
$> mvn spring-boot:run
```

Check this url: http://localhost:8080/version

# Set MySQL password on Kubernetes

```bash
$> kubectl create secret generic mysql-pass --from-literal=password=YOUR_PASSWORD --namespace=devops-airports-app
```

# Enable access from Kubernetes to Docker registry

```bash
$> kubectl create \
    secret docker-registry nexus-docker \
    --docker-server=nexus-dr.tntformacion.com:10001 \
    --docker-username=admin \
    --docker-password=autentia \
    --docker-email=admin@example.org --namespace=devops-airports-app
```

# If not installed yet, you have to install tiller on Kubernetes

$> kubectl -n kube-system create serviceaccount tiller
$> kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller
$> helm init --service-account tiller

# Set Ingress Basic Auth

$> htpasswd -bc auth username password

$>  kubectl create secret generic ingress-basic-auth --from-file=auth -n devops-airports-app

# Set Secure tls

$> kubectl create secret tls secure-tls --key privkey1.pem --cert fullchain1.pem -n devops-airports-app

# Create mysql database into the cluster

$> kubectl apply -f manifests/mysql/deployment.yaml

$> kubectl apply -f manifests/mysql/service.yaml 